---
- name: Set linux limits
  hosts: all
  become: true
  tasks:
    - set_fact:
        limits_filename: "/etc/security/limits.d/{{ values.limits_filename | default('98-day2-limits') }}.conf"
        sysctl_filename: "/etc/sysctl.d/{{ values.sysctl_filename | default('98-day2-limits') }}.conf"
        systemd_system_filename: "/etc/systemd/system.conf"
        systemd_user_filename: "/etc/systemd/user.conf"
        pamd_session_filename: "/etc/pam.d/common-session"
        pamd_session_noninteractive_filename: "/etc/pam.d/common-session-noninteractive"

    - name: Cleanup old limit settings
      when: values.cleanup_before | default (False)
      block:
        - name: Delete old limits file
          notify:
            - Create a reboot request
          file:
            state: absent
            path: "{{ limits_filename }}"

        - name: Delete old sysctl file for nofile limit
          notify:
            - Reload sysctl from drive
          file:
            state: absent
            path: "{{ sysctl_filename }}"

        - name: Drop limit requirement from pam configs
          block:
            - community.general.pamd:
                name: common-session
                type: session
                control: required
                module_path: pam_limits.so
                state: absent
            - community.general.pamd:
                name: common-session-noninteractive
                type: session
                control: required
                module_path: pam_limits.so
                state: absent

        - name: Unset systemd config fields to default (non-defined)
          notify: Reload systemd configs
          block:
            - community.general.ini_file:
                path: "{{ systemd_system_filename }}"
                section: "Manager"
                option: DefaultLimitNOFILE
                state: absent
            - community.general.ini_file:
                path: "{{ systemd_user_filename }}"
                section: "Manager"
                option: DefaultLimitNOFILE
                state: absent

    - name: Configure system-wide hard limits
      when: values.system | default ({}) != {}
      block:
        - name: Set limits to limits.d/ .conf file
          with_dict: "{{ values.system }}"
          community.general.pam_limits:
            domain: "*"
            limit_type: "hard"
            limit_item: "{{ item.key }}"
            value: "{{ item.value }}"
            dest: "{{ limits_filename }}"
          notify:
            - Create a reboot request

        - name: Repeat wildcard limits to root user
          with_dict: "{{ values.system }}"
          community.general.pam_limits:
            domain: "root"
            limit_type: "hard"
            limit_item: "{{ item.key }}"
            value: "{{ item.value }}"
            dest: "{{ limits_filename }}"
          notify:
            - Create a reboot request

        - name: Configure additional sysctl for "max open processes" limit
          when: values.system.nproc | default (None) != None
          block:
            - sysctl:
                name: "kernel.pid_max"
                value: "{{ values.system.nproc }}"
                state: "present"
                reload: yes
                sysctl_file: "{{ sysctl_filename }}"

        - name: Configure additional system settings for "max opened files" limit
          when: values.system.nofile | default (None) != None
          block:
            - sysctl:
                name: "fs.file-max"
                value: "{{ values.system.nofile }}"
                state: "present"
                reload: yes
                sysctl_file: "{{ sysctl_filename }}"

            - sysctl:
                name: "fs.nr_open"
                value: "{{ values.system.nofile }}"
                state: "present"
                reload: yes
                sysctl_file: "{{ sysctl_filename }}"

            - community.general.ini_file:
                path: "{{ systemd_system_filename }}"
                section: "Manager"
                option: DefaultLimitNOFILE
                state: present
                value: "{{ values.system.nofile }}"
            - community.general.ini_file:
                path: "{{ systemd_user_filename }}"
                section: "Manager"
                option: DefaultLimitNOFILE
                state: present
                value: "{{ values.system.nofile }}"

            - community.general.pamd:
                name: common-session
                type: session
                control: required
                module_path: pam_limits.so
                state: updated
            - community.general.pamd:
                name: common-session-noninteractive
                type: session
                control: required
                module_path: pam_limits.so
                state: updated

    # if defined root limits will override system-wide default limits here
    - name: Configure per users limits using /etc/limits.d/ config
      when: values.users | default ({}) != {}
      block:
      - include_tasks: set_limit.yaml
        with_dict: "{{ values.users }}"
        loop_control:
          loop_var: outer_item
      notify:
        - Create a reboot request

  handlers:
  - name: Reload sysctl
    ansible.builtin.command: /usr/sbin/sysctl -p
    listen: Reload sysctl from drive

  - name: Reload systemd configs
    ansible.builtin.systemd:
      daemon_reload: true
    listen: Reload systemd configs

  - block:
    - name: Create /run/day2
      ansible.builtin.file:
        path: /run/day2
        state: directory
      listen: Create a reboot request

    - name: Create /run/day2
      ansible.builtin.file:
        path: /run/reboot-required
        state: touch
      listen: Create a reboot request

    - name: Update /run/day2/reboot-required with reboot reason
      ansible.builtin.lineinfile:
        path: "/run/day2/reboot-required"
        line: Reboot is requested due to (re)configuring linux limits using linux_limits day2 module
        create: true
      listen: Create a reboot request
    when: not ((values.disable_reboot_request | default(False)) | bool)
